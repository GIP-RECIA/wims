<b>Géométrie dynamique</b>
(nom : <span class="tt wims_code_words">geogebra</span>)
:option:output=(nocoord noobjet) extra=yes max=" " feedbackscript=Correction
Une applet de géométrie dynamique GeoGebra est affichée. L'utilisateur
peut construire un certain nombre d'objets (points, droites, cercles, etc.).
Ce type doit obligatoirement être utilisé avec la commande <span class="tt wims_code_words">\embed</span>
<p>
La bonne réponse doit être donnée sous la forme d'une matrice.
Chaque ligne contient des instructions d'une des formes suivantes
(f pour formal, n pour numeric)
</p>
<pre>
n, "condition numérique", text
f, "condition formelle", text
n, "condition numérique avec syntaxe formelle", text
</pre>
<span class="tt">text</span> apparaît dans l'analyse de réponse.
Si aucun texte n'est mis, un texte par défaut est construit à partir
de la condition ; si le texte est le mot <span class="tt wims_code_words">hiden</span>,
la condition n'apparaît pas dans l'analyse de la réponse.

<ul><li><b>condition formelle</b> : permet de vérifier si des objets ggb ont été construits.
doit être rédigée en anglais et dans la syntaxe de GeoGebra 5.0.182.0.
(voir
<a target="wims_external" href="https://www.geogebra.org/manual/en/Geometry_Commands">https://www.geogebra.org/manual/en/Geometry_Commands</a> )
Si le nom d'un objet ggb est imposé et que l'utilisateur répond avec un autre nom alors
l'objet sera reconnu quand même mais une pénalité sera donnée.

Il est cependant recommandé de mettre le nom dans le cas de nombreuses conditions.
L'analyse de la réponse vérifie que la condition est bien réalisée sans remplacement.
Quelques tests supplémentaires sont ajoutés. Par exemple, si la condition
est <span class="tt wims_code_words">A=Center[c]</span>, on vérifiera aussi si l'utilisateur a répondu
quelque chose comme <span class="tt wims_code_words">c=Circle[A,B]</span>.

<p>Exemples :</p>
<ul><li>
<span class="tt wims_code_words">Point</span> :
 les conditions formelles analysent la construction des nouveaux points. Par contre si un point est
 déjà construit sur la figure, les élèves doivent impérativement déplacer ce point
 pour que l'analyse s'effectue correctement.
<pre>
\answer{}{f,A=Point,Le point A est construit :;
f,C=Point,Le point C est construit :;
f,F=Point,Le point F est construit :;}{type=geogebra}{option=max=6 extra=yes output=coord}
</pre>
Attention : il reste un problème de reconstruction quand un point est sur un des axes
du repère mais l'analyse de la réponse reste correcte.
</li><li>
<span class="tt wims_code_words">Circle</span> :
 les conditions formelles analysent l'ensemble des cercles qu'ils soient construits au préalable
 ou qu'ils soient construits par les élèves.
 Attention ce comportant différe des conditions sur un point vu au préalable.
 Pour éviter de transformer les cercles en ellipse, La commande setCoordSystem ne doit pas être utilisée
 ou judicieusement.
  Les conditions d'analyse sont les suivantes :
<ul><li><span class="tt wims_code_words">c=Circle[A,B]</span> :
 vérifie que le cercle (c) de centre A et de rayon AB soit tracé. L'utilisateur doit impérativement
 avoir cliqué sur les points A et B avec l'outil cercle.
 </li><li><span class="tt wims_code_words">=Circle[A,B]</span> :
 vérifie qu'un cercle quelconque de centre A et de rayon AB soit tracé. L'utilisateur doit impérativement
 avoir cliqué sur les points A et B.
 </li><li><span class="tt wims_code_words">=Circle[,B]</span> :
 vérifie qu'un cercle quelconque passe par le point B qui n'est pas le centre du cercle. L'utilisateur
 doit impérativement avoir cliqué sur le point B.
 </li><li><span class="tt wims_code_words">=Circle[C,]</span> :
 vérifie qu'un cercle quelconque a pour centre le point C. L'utilisateur doit impérativement
 avoir cliqué sur le point C.
</li></ul>
<pre>
\answer{}{f,O=Point,Le point O est construit :;
f,c=Circle[O,A],Le cercle \(C) de centre O et passant par A est construit :;
f,=Circle[,C],Un cercle passant par C (clic obligatoire sur C) est construit :;
f,=Circle[A,C],Un cercle de centre A et passant par C est construit :;
f,=Circle[C,],Un cercle de centre C (clic obligatoire sur C) est construit :;
}{type=geogebra}{option=output=nocoord extra=yes max=10}
</pre>
</li><li>
<span class="tt wims_code_words">Droite</span> :
 les conditions formelles prennnent en compte l'ensemble des droites construites au préalable
 ou réalisées par les élèves.
 Les conditions d'analyse sont les suivantes :
<ul><li><span class="tt wims_code_words">a=Line[A,B]</span> :
 vérifie que la droite (a) passant par A et B soit tracé. L'utilisateur doit impérativement
 avoir cliqué sur les points A et B.
 </li><li><span class="tt wims_code_words">=Line[A,B]</span> :
 vérifie qu'une droite passant par A et B soit tracé. Le nom de la droite ayant aucune
 importance permet de ne pas tenir compte de l'ordre de construction. L'utilisateur doit
 impérativement avoir cliqué sur les points A et B.
 </li><li><span class="tt wims_code_words">=Line[,B]</span> :
 vérifie qu'une droite passant par B soit tracé. L'utilisateur doit impérativement avoir cliqué
 sur le point B avec l'object droite sélectionné.
 </li></ul>
<pre>
\answer{}{f,B=Point,Le point B est construit :;
f,C=Point,Le point C est construit :;
f,a=Line[A,B],La droite (a) passant par les point A et B est construite :;
f,=Line[B,C],La droite (BC) est construite :;
f,=Line[,D],Une droite passant par le point D est construite :;
}{type=geogebra}{option=output=nocoord extra=yes max=10}
</pre>
</li><li>
<span class="tt wims_code_words">Perpendiculaire</span> :
Les conditions formelles analysent l'ensemble des perpendiculaires.
Pour conserver les angles, La commande setCoordSystem est à proscrire. De plus il est conseillé
de mettre enableShiftDragZoom=false dans les options pour que les élèves
 ne modifient pas les échelles des repères.
 Les conditions d'analyse sont les suivantes :
<ul><li><span class="tt wims_code_words">b=OrthogonalLine[A,a]</span> :
 vérifie que la droite (b) est perpendiculaire à (a)
 et passe par A. L'utilisateur doit impérativement avoir cliqué sur la droite (a) et le point A
 avec l'outil perpendiculaire.
 </li><li><span class="tt wims_code_words">=OrthogonalLine[A,]</span> :
 vérifie qu'une droite perpendiculaire passe par le point A.
 L'utilisateur doit impérativement cliquer sur le point A avec l'outil perpendiculaire.
 </li><li><span class="tt wims_code_words">=OrthogonalLine[,a]</span> :
 vérifie qu'une droite est perpendiculaire à la droite (a).
 L'utilisateur doit impérativement cliquer sur la droite (a) avec l'outil perpendiculaire.
 </li></ul>
</li></ul>

<p>
<b>L'ensemble des commandes disponibles sont les suivantes</b> :
</p><ul>
<li><span class="tt wims_code_words">A=Point</span> :
 A est un point de la figure.
</li><li><span class="tt wims_code_words">c=Circle[A,B]</span> :
 (c) est un cercle de centre A et passant par B.
</li><li><span class="tt wims_code_words">a=Line[A,B] </span> :
 (a) doit être la droite passant par A et B.
</li><li><span class="tt wims_code_words">a=LineBisector[A,B]</span> :
 (a) est la médiatrice du segment [AB].
</li><li><span class="tt wims_code_words">b=PerpendicularLine[A,a]</span> :
 (b) est la perpendiculaire à (a) passant par A.
</li><li><span class="tt wims_code_words">C=Middle[A,B]</span> :
 C est le milieu du segment [AB].
</li><li><span class="tt wims_code_words">c=AngularBisector[a,b]</span> :
 (c) est la bisectrice des droites (a) et (b)
</li><li><span class="tt wims_code_words">-30=AngleOriente[A,B,A,C]</span> :
 l'angle orienté (AB,AC) doit mesurer -30°.
</li><li><span class="tt wims_code_words">30=AngleGeom[A,B,C]</span> :
 l'angle géométrique ABC doit mesurer 30°.
</li></ul>
</li>
<li><b>condition numérique</b> :
les conditions numériques analysent les objets ggb à partir
des coordonnées des points, des vecteurs, des équations de droites, des cercles...
Dans le cas d'égalité, utiliser le test <span class="tt wims_code_words">==</span>
. Il est recommandé
de faire des tests d'inégalité numérique plutôt que des tests d'égalité :<span class="tt wims_code_words"> abs(x_c-1.2)<10^(-6)</span>
par exemple, plutôt que <span class="tt wims_code_words">x_c==1.2</span>.
<ul><li><span class="tt wims_code_words">Point</span> :
L'analyse numérique évalue le nom et les coordonnées des points. Les variables <span class="tt wims_code_words">x_A et y_A</span>
 sont respectivement l'abscisse et l'ordonnée d'un point A ou d'un vecteur A. Une analyse
 en 3D est possible en ajoutant
 la variable <span class="tt wims_code_words">z_A</span>. Au préalable l'option <span class="tt wims_code_words">enable3d</span>
 doit être activée.
<br>
La condition d'analyse est la suivante :
<br>
<span class="tt wims_code_words">abs(x_A-1)<0.3&abs(y_A-3)<0.3 :</span> Vérifie le placement du point A avec une erreur
absolue de 0.3 sur les valeurs de l'abscisse et de l'ordonnée.
<pre>
\answer{}{n,abs(x_A-1)<0.3&abs(y_A-3)<0.3,Est-ce-que le point \(A(1,3)) est bien placé ?;
n,abs(x_C+2)<0.3&abs(y_C-5)<0.3,Est-ce-que le point \(C(-2,5)) est bien placé ?;
n,abs(x_F+4)<0.3&abs(y_F+3)<0.3,Est-ce-que le point \(F(-4,-3)) est bien placé ?;}{type=geogebra}{option=max=6 extra=yes output=coord}
</pre>
</li><li><span class="tt wims_code_words">Cercle</span> :
l'analyse numérique d'un cercle nécessite selon les cas la connaissance du nom du cercle.
 Les variables <span class="tt wims_code_words">R_c, x_c et y_c</span> sont respectivement le carré
 du rayon d'un cercle <span class="tt">c</span>,
 l'abscisses et l'ordonné de son centre. Pour éviter de transformer les cercles en ellipse,
 la commande setCoordSystem
 ne doit pas être utilisée ou judicieusement.
<ul><li>Si la construction doit tolérer des approximations, les conditions d'analyse sont
 les suivantes :
<ul><li><span class="tt wims_code_words">abs(R_c-((x_A-x_B)^2+(y_A-y_B)^2))<0.3 :</span> vérifie que
le rayon du cercle (c)
est environ égale à la distance AB. Attention R_c est le rayon au carré.
</li><li><span class="tt wims_code_words">abs(x_c-x_A)<0.1 & abs(y_c-y_A)<0.1 :</span>
vérifie que le centre du cercle (c) est
 confondu avec le point A.
 </li></ul></li><li>
 Dans le cadre d'une construction formelle, on peut réaliser l'analyse d'un cercle dont on
 ne connait pas le nom avec les conditions d'analyse suivantes :
<ul><li><span class="tt wims_code_words">eq_c:(x+1)^2+(y-4)^2=10 :</span>vérifie que le cercle (c) a pour équation (x+1)^2+(y-4)^2=10
</li><li><span class="tt wims_code_words">eq_:(x-x_A)^2+(y-y_A)^2=(x_A-x_B)^2+(y_A-y_B)^2 :</span>
vérifie qu'un cercle passe par le
 point A et a pour rayon AB.</li></ul>
 </li></ul>
<pre>
\answer{}{n,abs(R_c-((x_A-x_B)^2+(y_A-y_B)^2))<0.3,Le rayon du cercle \(C) est correct :;
n,abs(x_c-x_A)<0.1 & abs(y_c-y_A)<0.1 ,Le centre du cercle \(C) est confondu avec le point A. ;
n,eq_c:(x-x_A)^2+(y-y_A)^2=(x_A-x_B)^2+(y_A-y_B)^2, L'équation du cercle \(C) est bonne : ;
n,eq_:(x+1)^2+(y-4)^2=10, Le cercle de centre C est de rayon CA est tracé : ;}
{type=geogebra}{option=extra=yes max=20 output=nocoord}
</pre>
</li><li><span class="tt wims_code_words">Droite</span> :
l'analyse numérique de droite nécessite selon les cas la connaissance du nom de la droite.
 Les variables <span class="tt wims_code_words">m_d et p_d</span> sont respectivement
 le coefficient directeur et l'ordonnée à
 l'origine de l'équation réduite de la droite (d). Les variables <span class="tt wims_code_words">a_d, b_d et c_d</span> sont
 les coefficients d'une équation de la droite (d) du type ax + by = c.
<ul><li>Si la construction doit tolérer des approximations, les conditions d'analyse sont
 les suivantes :
<ul><li><span class="tt wims_code_words">abs(m_a-0.5)<0.1 & abs(p_a-2)<0.1 :</span> vérifie
le coefficient directeur
 et l'ordonnée à l'origine de l'équation réduite de la droite (a) avec une précision de 0.1.
 </li><li><span class="tt wims_code_words">abs(a_b-2)<0.1 & abs(b_b-1)<0.1 & abs(c_b+3)<0.1 :</span>
 vérifie les 3 coefficients
 de l'équation \(ax+by=c) d'une droite (b) avec une précision de 0.1. Attention
  une même droite peut avoir plusieurs triplets (a,b,c) donc il est préférable d'analyser les
  quotients.</li></ul></li>
 <li>Dans le cadre d'une construction formelle, on peut réaliser l'analyse d'une droite dont on
 ne connait pas le nom avec les conditions d'analyse suivantes :
 <ul><li><span class="tt wims_code_words">eq_:-2x+3y=-1 :</span> vérifie que la droite d'équation -2x+3y=-1 est construite. Par contre les
 coefficients de son équation ne sont pas analysé avec une erreur absolue. Par conséquent il est conseillé
 de créer un fichier ggb avec l'aimantation mise à "attaché à la grille" avec une grille relativement fine
 pour laisser de nombreuses possibilités.</li></ul></li>
</ul>
<pre>
\answer{}{
f,C=Point,Le point C est construit :;
f,=Line[A,B],La droite (AB) est construite :;
n,abs(m_a-0.5)<0.1 & abs(p_a-2)<0.1,Est-ce-que la droite (a) est bien tracée ?;
f,=Line[B,C],La droite (BC) est construite :;
n,abs(a_b-2)<0.1 & abs(b_b-1)<0.1 & abs(c_b+3)<0.1,Est-ce-que la droite (b) est bien tracée ?;
f,=Line[C,D],La droite (CD) est construite :;
n,eq_:-2x+3y=-1,Est-ce-qu'une droite d'équation \(-2x+3y=-1) est tracée ?;}{type=geogebra}{option=output=nocoord extra=yes precision=10 max=20}
</pre>
</li>
<li><span class="tt wims_code_words">Objet</span> :
 l'analyse numérique d'objet nécessite la connaissance de son nom. Les objets peuvent être du type <span class="tt wims_code_words">segment, function, angle, curseur
 et cellule du tableur</span>.
<pre>
\answer{}{n,abs(v_a-3)<0.4,Est-ce-que le longueur du segment a est correcte ?}{type=geogebra}{option=extra=yes max=50 precision=1}
\answer{}{n,v_f(x)=(1+x^2),Est-ce-que la fonction f est bien tracée ?}{type=geogebra}{option=extra=yes precision=1}
\answer{}{n,abs(v_a-\a)<0.1,Est-ce-que la curseur a est bien positionné ?}{type=geogebra}{option=extra=yes precision=1 ignore=text&point}
\answer{}{n,abs(\test)<0.1 & abs(\test2)<0.1,Le vecteur \(\overrightarrow{u}\) est bien construit :}{type=geogebra}{option=extra=yes precision=1}
\answer{}{n,abs(v_B5-(\nwc))<=0,La case B5 est correct;
n,abs(v_D2-(\pm))<=0,Le prix Total HT des écrans est juste;}{type=geogebra}{option=extra=yes precision=2 max=50 output=coord}
</pre>
</li><li>
<span class="tt wims_code_words">x2_c,y2_c,xy_c,x_c,y_c,cst_c</span> : coefficients de <span class="tt wims_code_words">x^2, y^2, x*y, x,y, 1</span> d'une conique
<span class="tt wims_code_words">c</span>.
</li>
</ul>
On peut aussi tester des équations par exemple, <span class="tt wims_code_words">eq_a:2x+y=3</span> (ou <span class="tt wims_code_words">eq_:2x+y=3</span>
si on ne désire pas donner d'importance au nom de la droite) teste si 2x+y=3 est une équation de la droite <span class="tt wims_code_words">a</span>.
<p>
<b>Exemple</b> : <span class="tt wims_code_words">x_c>0 && y_c>0 && R_c<4</span> demande de tester si le cercle <span class="tt wims_code_words">c</span>
a un centre dont les coordonnées sont positives et un rayon inférieur à 2.
L'utilisation des noms des objets pour formuler les <i>tests numériques</i> est
obligatoire. Dans le cas d'égalité, utiliser le test <span class="tt wims_code_words">==</span>. Il est recommandé
de faire des tests d'inégalité numérique plutôt que des tests d'égalité :<span class="tt wims_code_words"> abs(x_c-1.2)<10^(-6)</span>
par exemple, plutôt que <span class="tt wims_code_words">x_c==1.2</span>.
</p></li>
<li><b>condition numérique avec syntaxe formelle</b> : La syntaxe est similaire à celle des conditions formelles mais l'analyse est faite numériquement avec une
très grande précision. (par défaut
!insmath 10^(-13)
) Le logiciel pari est utilisé à l'aide des formules d'analyse classique des objets. Par exemple pour analyser la médiatrice
 du segment [AB], on utilise son équation :
!insmath {2(x_B-x_A)x+2(y_B-y_A)y+x_A^2-x_B^2+y_A^2-y_B^2=0}
. Par conséquent les noms des objets à l'intérieur des commandes doivent tous être donnés mais il n'est pas obligatoire de préciser le nom de l'objet construit.
Le remplacement numérique est fait à l'aide des données numériques
de la réponse de l'utilisateur.
<pre>
\answer{}{n,LineBisector[A,B],La médiatrice du segment [AB] est correctement construite :;
}{type=geogebra}{option=extra=yes precision=2 max=150 output=noobjet}
</pre>
</li></ul>
<p>Une seule réponse du type <span class="tt wims_code_words">geogebra</span> est possible
pour l'instant dans l'exercice.
On doit obligatoirement utiliser la commande <span class="tt wims_code_words">embed</span> :
</p>
<pre>
\embed{reply1,option}
</pre>
où <span class="tt wims_code_words">option</span> a comme première ligne la taille
de l'applet en pixels (Largeur x Hauteur). Les lignes suivantes sont formées d'options
de l'applet ou de commandes (objets prédéfinis). Par exemple :
<pre>
  showToolBar=true
  customToolBar=0|40|2|10
  A = (1,2)
  B = (-1,2)
  a = Line[A,B]
  setFixed('A',true)
  setFixed('B',true)
  setAxesVisible(false,false)
</pre>
La liste complète et à jour se trouve dans la documentation du slib geogebra.
<pre>
file
ggbBase64
showToolBar (default : false)
showMenuBar (default : false)
showResetIcon (default : false)
showToolBarHelp (default : true)
enableRightClick (default : true)
enableLabelDrags (default : false)
enableShiftDragZoom (default : true)
showAlgebraInput (default : false)
customToolBar (Une barre d'outils est donnée par défaut. La liste des icônes <a target="wims_external" href="http:///wiki.geogebra.org/en/Reference:Toolbar">se trouve là</a>)
</pre>
Les commandes possibles sont les définitions d'objets et certaines méthodes javascript
de GeoGebra.
Nous en donnons quelques-unes, voir la documentation du slib geogebra pour une liste
à jour de ce qui est utilisable à travers WIMS.
<pre>
  evalCommand setValue setCoords setColor setVisible
  setLabelVisible setLabelStyle setFixed setTrace
  setAxesVisible setGridVisible setCoordSystem setUndoPoint
  deleteObject renameObject setLayer setLayerVisible
  setLineStyle setThickness setPointStyle setPointSize
  setFilling setAnimating setAnimationSpeed
  startAnimation stopAnimation isAnimationRunning
</pre>
Par exemple,
<pre>
evalCommand("SetFixed[Objet, true|false]")
</pre>
Pour plus de détails, voir l'aide de GeoGebra sur la syntaxe des méthodes javascript disponibles :<br>
<a target="wims_external" href="http://www.geogebra.org/source/program/applet/geogebra_applet_javascript.html">
http://www.geogebra.org/source/program/applet/geogebra_applet_javascript.html</a>
<p>
La variable <span class="tt wims_code_words">\reply</span><i>n</i> où <i>n</i> est
le numéro du champ de réponse est formée
de plusieurs lignes. La première ligne donne le nombre d'objets. Les lignes suivantes
contiennent la définition de chaque objet (une ligne par objet), d'abord formellement
si cela est possible, puis numériquement.
</p><p>
La variable <span class="tt wims_code_words">\sc_reply</span><i>n</i> contient
sur la première ligne une valeur. Elle évalue la réponse globale de la manière suivante :
</p>
<ul><li> 0 : mauvaise réponse</li>
<li> 0.5 : erreur de nom seulement</li>
<li>1 : bonne réponse</li></ul>
La seconde ligne est constituée de plusieurs colonnes qui évaluent chaque condition numérique ou formelle de la même manière que précédement.
La troisième ligne indique le numéro du scénario utilisé. Si l'option n'est pas activé, le numéro renvoyé est 0.
<p>
<b>Options</b> :</p>
<ul><li><span class="tt wims_code_words">max</span>
nombre maximum d'objets qui peuvent être construits dans l'applet
(par défaut : 10).
</li><li><span class="tt wims_code_words">precision</span> :
précision absolue (nombre de décimales prises en compte pour
les comparaisons numériques, défaut : 18).
</li><li><span class="tt wims_code_words">idontknow</span> (<span class="tt wims_code_words">yes</span> or <span class="tt wims_code_words">no</span>, par défaut : <span class="tt wims_code_words">no</span>) :
fait apparaître un bouton <span class="tt wims_code_words">Je ne sais pas</span> à côté du bouton <span class="tt wims_code_words">Valider</span>.
</li><li><span class="tt wims_code_words">extra</span> (<span class="tt wims_code_words">yes</span> or <span class="tt wims_code_words">no</span>, par défaut : <span class="tt wims_code_words">no</span>) :
autorise les objets supplémentaires (si l'option <span class="tt wims_code_words">extra</span> n'est pas égale à <span class="tt wims_code_words">yes</span>,
le score est diminué dans le cas où il y a plus
d'<i>objets construits par l'élève</i>
qu'il n'y avait de <i>conditions formelles</i> données dans la bonne réponse par
l'auteur de l'exercice.)
</li><li><span class="tt wims_code_words">norebuild</span> :
La reconstruction des objects n'est pas réalisée. C'est donc le code oef qui doit contenir
les informations pour la figure en allant chercher les informations dans la variable <span class="tt wims_code_words">\reply</span>.
 Cette manière de faire est très utile dans les exercices à étapes mais nécessite une certaine maîtrise de l'utilisateur.
</li><li><span class="tt wims_code_words">output</span> :
les valeurs possibles sont <span class="tt wims_code_words">coord</span> (défaut),
<span class="tt wims_code_words">formal</span>, <span class="tt wims_code_words">nothing</span>.
La différence se trouve dans la manière dont les objets construits par l'utilisateur
sont réaffichés dans l'analyse de la réponse :
<ul><li><span class="tt wims_code_words">coord</span> :
 les coordonnées des objets sont affichées ;
 </li><li><span class="tt wims_code_words">nocoord</span> :
 seuls les noms des objets construits sont affichés ;
 </li><li><span class="tt wims_code_words">formal</span> :
les relations formelles sont affichées s'il y en a ;
</li><li><span class="tt wims_code_words">noobjet</span> :
seul le texte écrit après les conditions est affiché.
</li><li><span class="tt wims_code_words">nothing</span> :
aucun affichage.</li>
</ul>
</li><li><span class="tt wims_code_words">weights</span>
(par défaut, 1&0.2&1) le score final de la construction est
la moyenne pondérée de trois scores dont on peut ici préciser les coefficients
(séparés par des <span class="tt wims_code_words">&</span>). Ces trois scores sont respectivement le score
des <i>tests formels</i> (f),
le score des <i>noms des objets demandés</i>, le score des <i>tests numériques</i> (n).
</li><li><span class="tt wims_code_words">object_analysis</span> :
 définit le préfixe des noms d'objets qui seront analysés.
Il ne peut s'agir que d'objets prédéfinis. Dans ce cas, aucun autre objet ne sera analysé.
Si un fichier ggb est utilisé, il est indispensable de modifier au préalable le fichier utilisé.
</li><li><span class="tt wims_code_words">feedbackscript</span> :
 Sa valeur est le nom
d'une fonction javascript qui doit être définie en javascript correct dans le champ
<span class="tt wims_code_words">\feedback</span>. Lors de l'analyse de la réponse,
un bouton permet de lancer son exécution. Par défaut le nom du bouton est Correction.
</li><li><span class="tt wims_code_words">namebutton</span> : Sa valeur définit le nom du bouton.
</li><li><span class="tt wims_code_words">scenario</span> : Cette option permet de définir
 plusieurs scenarios de constructions d'une figure. La première valeur est la ou les conditions nécessaires pour appliquer le scenario.
 Par conséquent on peut réaliser des scénarios qui dépendent des objets construits par l'élève. (à finaliser) Elle peut être vide et dans ce cas là le scénario est obligatoirement analysé.
 Les valeurs suivantes indiquent les lignes qui vont être analysées dans chaque scenario de construction. La note attribuée correspond toujours au scénario le plus favorable.
<pre>
\answer{}{f,A=Point,Le point A est construit;
n,abs(x_A-1)<0.3&abs(y_A-3)<0.3,Est-ce-que le point \(A(1,3)) est bien placé ?;
f,B=Point,Le point B est construit;
f,C=Point,Le point C est construit;
f,D=Point,Le point D est construit;
f,E=Point,Le point E est construit;
f,F=Point,Le point F est construit;
n,=Line[A,B],la droite (AB) est construite;
f,=Line[B,C],la droite (BC) est construite;
}{type=geogebra}{option=extra=yes precision=3 max=200 output=noobjet feedbackscript=Correction
scenario=@A:1:2:9@B:1:3:4:8@}
</pre>
</li></ul>
<p><b>Remarques générales</b> :</p>
<ul><li>
L'utilisation du type de réponse <span class="tt wims_code_words">geogebra</span> ralentit
le chargement des pages : il ne faut l'utiliser que si le recours
à la géométrie dynamique est utile.
</li><li>
Les objets dont le nom commence par <span class="tt wims_code_words">My_</span>
ne seront pas reconnus par WIMS et ne seront pas réaffichés lors de l'analyse de la réponse.
</li><li>
Les mesures des angles sont toujours en degrés.
</li><li>
Une fonction <span class="tt wims_code_words">f</span> a pour nom
<span class="tt wims_code_words">f(x)</span>.
Il faut donc écrire quelque chose du type <span class="tt wims_code_words">f(x)=sin(x)</span>.
</li></ul>

:Data and list manipulation
:Function,Example,Effect
:items( )
items(a,b,c,d,e,f)
the number of items (here it's 6) in the list {a,b,c,d,e,f}
:item( )
item(3,a,b,c,d,e,f)
item number 3 of the list {a,b,c,d,e,f} (hence c) ; <span class="tt wims_code_words">item(3,\ll)</span> is the item number 3 of the list \ll (same as <span class="tt wims_code_variable">\ll[3]</span>)
:item( .. , )
item(2..5,a,b,c,d,e,f)
items number 2 to 5 of the list {a,b,c,d,e,f} (hence b,c,d,e)
:item([ , ], )
item([2,4],\ll)
items number 2 and 4 of the list \ll (same as <span class="tt wims_code_variable">\ll[2,4]</span>)
:position( )
position(make,do,go,make,take)
number of position of the item `make' in the list {do,go,make,take} (hence 3)
:rows( )
rows(\m)
the number of rows in the matrix \m
:row( , )
row(2,\m)
row number 2 of the matrix \m (same as <span class="tt wims_code_variable">\m[2;]</span>)
:row( .. , )
row(2..5,\m)
the submatrix of \m consisting of rows number 2 to 5 (same as <span class="tt wims_code_variable">\m[2..5;]</span>)
:row([ , ], )
row([1,3],1,2,3<br>3,4,5<br>5,6,7)
the submatrix of the 3&times;3 matrix consisting of the first and the last rows
:row( , )
row(column 1 > 1 and column 2 = good,\mat)
the submatrix of \mat consisting of rows where column 1 is > 1 and column 2 is the word `good'
:randomitem( )
randomitem(\list)
a random item of (comma-separated) \list.
:randomrow( )
randomrow(\mat)
a random row of the matrix \mat.
:column( , )
column(2,\m)
items of column number 2 of the matrix \m, as a comma-separated list (same as <span class="tt wims_code_variable">\m[;2]</span>)
:column( .. , )
column(2..5,\m)
the submatrix of \m consisting of columns number 2 to 5 (same as <span class="tt wims_code_variable">\m[;2..5]</span>)
:column([ , ], )
column([1,3],1,2,3<br>3,4,5<br>5,6,7)
the submatrix of the 3&times;3 matrix consisting of the first and the last columns
:asis( )
asis(How do you do? item(1,2,3))
the string as it is, protected from transformations and conditionality.
:htmlmath( )
htmlmath(2*x^2+3*x)
the best possible way to render the expressionin html way: 2x<sup>2</sup>+3x
:texmath( )
texmath(2*x^2+3*x)
the TeX source of the expression
